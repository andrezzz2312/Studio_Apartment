/**
 * Generated by Verge3D Puzzles v.3.8.1
 * Wed, 18 Jan 2023 23:57:27 GMT
 * Prefer not editing this file as your changes may get overridden once Puzzles are saved.
 * Check out https://www.soft8soft.com/docs/manual/en/introduction/Using-JavaScript.html
 * for the information on how to add your own JavaScript to Verge3D apps.
 */

'use strict';

(function() {

// global variables/constants used by puzzles' functions

var LIST_NONE = '<none>';

var _pGlob = {};

_pGlob.objCache = {};
_pGlob.fadeAnnotations = true;
_pGlob.pickedObject = '';
_pGlob.hoveredObject = '';
_pGlob.mediaElements = {};
_pGlob.loadedFile = '';
_pGlob.states = [];
_pGlob.percentage = 0;
_pGlob.openedFile = '';
_pGlob.openedFileMeta = {};
_pGlob.xrSessionAcquired = false;
_pGlob.xrSessionCallbacks = [];
_pGlob.screenCoords = new v3d.Vector2();
_pGlob.intervalTimers = {};
_pGlob.customEvents = new v3d.EventDispatcher();

_pGlob.AXIS_X = new v3d.Vector3(1, 0, 0);
_pGlob.AXIS_Y = new v3d.Vector3(0, 1, 0);
_pGlob.AXIS_Z = new v3d.Vector3(0, 0, 1);
_pGlob.MIN_DRAG_SCALE = 10e-4;
_pGlob.SET_OBJ_ROT_EPS = 1e-8;

_pGlob.vec2Tmp = new v3d.Vector2();
_pGlob.vec2Tmp2 = new v3d.Vector2();
_pGlob.vec3Tmp = new v3d.Vector3();
_pGlob.vec3Tmp2 = new v3d.Vector3();
_pGlob.vec3Tmp3 = new v3d.Vector3();
_pGlob.vec3Tmp4 = new v3d.Vector3();
_pGlob.eulerTmp = new v3d.Euler();
_pGlob.eulerTmp2 = new v3d.Euler();
_pGlob.quatTmp = new v3d.Quaternion();
_pGlob.quatTmp2 = new v3d.Quaternion();
_pGlob.colorTmp = new v3d.Color();
_pGlob.mat4Tmp = new v3d.Matrix4();
_pGlob.planeTmp = new v3d.Plane();
_pGlob.raycasterTmp = new v3d.Raycaster();

var PL = v3d.PL = v3d.PL || {};

// a more readable alias for PL (stands for "Puzzle Logic")
v3d.puzzles = PL;

PL.procedures = PL.procedures || {};




PL.execInitPuzzles = function(options) {
    // always null, should not be available in "init" puzzles
    var appInstance = null;
    // app is more conventional than appInstance (used in exec script and app templates)
    var app = null;

    var _initGlob = {};
    _initGlob.percentage = 0;
    _initGlob.output = {
        initOptions: {
            fadeAnnotations: true,
            useBkgTransp: false,
            preserveDrawBuf: false,
            useCompAssets: false,
            useFullscreen: true,
            useCustomPreloader: false,
            preloaderStartCb: function() {},
            preloaderProgressCb: function() {},
            preloaderEndCb: function() {},
        }
    }

    // provide the container's id to puzzles that need access to the container
    _initGlob.container = options !== undefined && 'container' in options
            ? options.container : "";

    

    // initSettings puzzle
_initGlob.output.initOptions.fadeAnnotations = true;
_initGlob.output.initOptions.useBkgTransp = false;
_initGlob.output.initOptions.preserveDrawBuf = true;
_initGlob.output.initOptions.useCompAssets = true;
_initGlob.output.initOptions.useFullscreen = true;

    return _initGlob.output;
}

PL.init = function(appInstance, initOptions) {

// app is more conventional than appInstance (used in exec script and app templates)
var app = appInstance;

initOptions = initOptions || {};

if ('fadeAnnotations' in initOptions) {
    _pGlob.fadeAnnotations = initOptions.fadeAnnotations;
}



var sofa, sofaValue, floorValue, objectList, listPosition, shel_1, shelveValue, interseccion, moving, shel_2, sofaPrice, shel_3, floorPrice, posicion, recliner, piso_1, shelvePrice, cameraX, shelveClicked, piso_2, mouseMove, cameraY, piso_3, sofaClicked, cameraZ, floorClicked, rotation_recliner, delete_recliner, info, screen_shot, title, dowload, line, upload, subTitle, json, sofa_1, sofa_2, sofa_3, pdf, my_3dobject, getSofaPosition, total;

// removePostprocessing puzzle
function removePostprocessing(mode) {
    if (mode == 'PUZZLES') {
        // keep outline and ambient occlusion
        appInstance.disablePostprocessing(true, true);
    } else if (mode == 'ALL') {
        appInstance.disablePostprocessing(false, false);
    }
}

// utility function envoked by almost all V3D-specific puzzles
// filter off some non-mesh types
function notIgnoredObj(obj) {
    return obj.type !== 'AmbientLight' &&
           obj.name !== '' &&
           !(obj.isMesh && obj.isMaterialGeneratedMesh) &&
           !obj.isAuxClippingMesh;
}


// utility function envoked by almost all V3D-specific puzzles
// find first occurence of the object by its name
function getObjectByName(objName) {
    var objFound;
    var runTime = _pGlob !== undefined;
    objFound = runTime ? _pGlob.objCache[objName] : null;

    if (objFound && objFound.name === objName)
        return objFound;

    if (appInstance.scene) {
        appInstance.scene.traverse(function(obj) {
            if (!objFound && notIgnoredObj(obj) && (obj.name == objName)) {
                objFound = obj;
                if (runTime) {
                    _pGlob.objCache[objName] = objFound;
                }
            }
        });
    }
    return objFound;
}


// utility function envoked by almost all V3D-specific puzzles
// retrieve all objects on the scene
function getAllObjectNames() {
    var objNameList = [];
    appInstance.scene.traverse(function(obj) {
        if (notIgnoredObj(obj))
            objNameList.push(obj.name)
    });
    return objNameList;
}


// utility function envoked by almost all V3D-specific puzzles
// retrieve all objects which belong to the group
function getObjectNamesByGroupName(targetGroupName) {
    var objNameList = [];
    appInstance.scene.traverse(function(obj){
        if (notIgnoredObj(obj)) {
            var groupNames = obj.groupNames;
            if (!groupNames)
                return;
            for (var i = 0; i < groupNames.length; i++) {
                var groupName = groupNames[i];
                if (groupName == targetGroupName) {
                    objNameList.push(obj.name);
                }
            }
        }
    });
    return objNameList;
}


// utility function envoked by almost all V3D-specific puzzles
// process object input, which can be either single obj or array of objects, or a group
function retrieveObjectNames(objNames) {
    var acc = [];
    retrieveObjectNamesAcc(objNames, acc);
    return acc.filter(function(name) {
        return name;
    });
}

function retrieveObjectNamesAcc(currObjNames, acc) {
    if (typeof currObjNames == "string") {
        acc.push(currObjNames);
    } else if (Array.isArray(currObjNames) && currObjNames[0] == "GROUP") {
        var newObj = getObjectNamesByGroupName(currObjNames[1]);
        for (var i = 0; i < newObj.length; i++)
            acc.push(newObj[i]);
    } else if (Array.isArray(currObjNames) && currObjNames[0] == "ALL_OBJECTS") {
        var newObj = getAllObjectNames();
        for (var i = 0; i < newObj.length; i++)
            acc.push(newObj[i]);
    } else if (Array.isArray(currObjNames)) {
        for (var i = 0; i < currObjNames.length; i++)
            retrieveObjectNamesAcc(currObjNames[i], acc);
    }
}

/**
 * Retrieve coordinate system from the loaded scene
 */
function getCoordSystem() {
    var scene = appInstance.scene;

    if (scene && 'coordSystem' in scene.userData) {
        return scene.userData.coordSystem;
    }

    return 'Y_UP_RIGHT';
}


/**
 * Transform coordinates from one space to another
 * Can be used with Vector3 or Euler.
 */
function coordsTransform(coords, from, to, noSignChange) {

    if (from == to)
        return coords;

    var y = coords.y, z = coords.z;

    if (from == 'Z_UP_RIGHT' && to == 'Y_UP_RIGHT') {
        coords.y = z;
        coords.z = noSignChange ? y : -y;
    } else if (from == 'Y_UP_RIGHT' && to == 'Z_UP_RIGHT') {
        coords.y = noSignChange ? z : -z;
        coords.z = y;
    } else {
        console.error('coordsTransform: Unsupported coordinate space');
    }

    return coords;
}


/**
 * Verge3D euler rotation to Blender/Max shortest.
 * 1) Convert from intrinsic rotation (v3d) to extrinsic XYZ (Blender/Max default
 *    order) via reversion: XYZ -> ZYX
 * 2) swizzle ZYX->YZX
 * 3) choose the shortest rotation to resemble Blender's behavior
 */
var eulerV3DToBlenderShortest = function() {

    var eulerTmp = new v3d.Euler();
    var eulerTmp2 = new v3d.Euler();
    var vec3Tmp = new v3d.Vector3();

    return function(euler, dest) {

        var eulerBlender = eulerTmp.copy(euler).reorder('YZX');
        var eulerBlenderAlt = eulerTmp2.copy(eulerBlender).makeAlternative();

        var len = eulerBlender.toVector3(vec3Tmp).lengthSq();
        var lenAlt = eulerBlenderAlt.toVector3(vec3Tmp).lengthSq();

        dest.copy(len < lenAlt ? eulerBlender : eulerBlenderAlt);
        return coordsTransform(dest, 'Y_UP_RIGHT', 'Z_UP_RIGHT');
    }

}();

function RotationInterface() {
    /**
     * For user manipulations use XYZ extrinsic rotations (which
     * are the same as ZYX intrinsic rotations)
     *     - Blender/Max/Maya use extrinsic rotations in the UI
     *     - XYZ is the default option, but could be set from
     *       some order hint if exported
     */
    this._userRotation = new v3d.Euler(0, 0, 0, 'ZYX');
    this._actualRotation = new v3d.Euler();
}

Object.assign(RotationInterface, {
    initObject: function(obj) {
        if (obj.userData.puzzles === undefined) {
            obj.userData.puzzles = {}
        }
        if (obj.userData.puzzles.rotationInterface === undefined) {
            obj.userData.puzzles.rotationInterface = new RotationInterface();
        }

        var rotUI = obj.userData.puzzles.rotationInterface;
        rotUI.updateFromObject(obj);
        return rotUI;
    }
});

Object.assign(RotationInterface.prototype, {

    updateFromObject: function(obj) {
        var SYNC_ROT_EPS = 1e-8;

        if (!this._actualRotation.equalsEps(obj.rotation, SYNC_ROT_EPS)) {
            this._actualRotation.copy(obj.rotation);
            this._updateUserRotFromActualRot();
        }
    },

    getActualRotation: function(euler) {
        return euler.copy(this._actualRotation);
    },

    setUserRotation: function(euler) {
        // don't copy the order, since it's fixed to ZYX for now
        this._userRotation.set(euler.x, euler.y, euler.z);
        this._updateActualRotFromUserRot();
    },

    getUserRotation: function(euler) {
        return euler.copy(this._userRotation);
    },

    _updateUserRotFromActualRot: function() {
        var order = this._userRotation.order;
        this._userRotation.copy(this._actualRotation).reorder(order);
    },

    _updateActualRotFromUserRot: function() {
        var order = this._actualRotation.order;
        this._actualRotation.copy(this._userRotation).reorder(order);
    }

});

// getObjTransform puzzle
function getObjTransform(objName, isWorldSpace, mode, coord) {
    if (!objName)
        return;
    var obj = getObjectByName(objName);
    if (!obj)
        return;

    var coordSystem = getCoordSystem();

    var transformVal;

    if (isWorldSpace && obj.parent) {
        if (mode === 'position') {
            transformVal = coordsTransform(obj.getWorldPosition(_pGlob.vec3Tmp), 'Y_UP_RIGHT',
                coordSystem, mode === 'scale');
        } else if (mode === 'rotation') {
            transformVal = coordsTransform(obj.getWorldEuler(_pGlob.eulerTmp, 'XYZ'), 'Y_UP_RIGHT',
                coordSystem, mode === 'scale');
        } else if (mode === 'scale') {
            transformVal = coordsTransform(obj.getWorldScale(_pGlob.vec3Tmp), 'Y_UP_RIGHT',
                coordSystem, mode === 'scale');
        }

    } else if (mode === 'rotation' && coordSystem == 'Z_UP_RIGHT') {
        transformVal = eulerV3DToBlenderShortest(obj.rotation,
                _pGlob.eulerTmp);

    } else if (mode === 'rotation' && coordSystem == 'Y_UP_RIGHT') {
        // Maya coordinates
        // Use separate rotation interface to fix ambiguous rotations for Maya,
        // might as well do the same for Blender/Max.

        var rotUI = RotationInterface.initObject(obj);
        transformVal = rotUI.getUserRotation(_pGlob.eulerTmp);

    } else {
        transformVal = coordsTransform(obj[mode].clone(), 'Y_UP_RIGHT',
                coordSystem, mode === 'scale');
    }

    if (mode === 'rotation') {
        transformVal.x = v3d.MathUtils.radToDeg(transformVal.x);
        transformVal.y = v3d.MathUtils.radToDeg(transformVal.y);
        transformVal.z = v3d.MathUtils.radToDeg(transformVal.z);
    }

    if (coord == 'xyz') {
        // remove order component for Euler vectors
        return transformVal.toArray().slice(0, 3);
    } else {
        return transformVal[coord];
    }
}

// outline puzzle
function outline(objSelector, doWhat) {
    var objNames = retrieveObjectNames(objSelector);

    if (!appInstance.postprocessing || !appInstance.postprocessing.outlinePass)
        return;
    var outlineArray = appInstance.postprocessing.outlinePass.selectedObjects;
    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        var obj = getObjectByName(objName);
        if (!obj)
            continue;
        if (doWhat == "ENABLE") {
            if (outlineArray.indexOf(obj) == -1)
                outlineArray.push(obj);
        } else {
            var index = outlineArray.indexOf(obj);
            if (index > -1)
                outlineArray.splice(index, 1);
        }
    }
}

// tweenCamera puzzle
function tweenCamera(posOrObj, targetOrObj, duration, doSlot, movementType) {
    var camera = appInstance.getCamera();

    if (Array.isArray(posOrObj)) {
        var worldPos = _pGlob.vec3Tmp.fromArray(posOrObj);
        worldPos = coordsTransform(worldPos, getCoordSystem(), 'Y_UP_RIGHT');
    } else if (posOrObj) {
        var posObj = getObjectByName(posOrObj);
        if (!posObj) return;
        var worldPos = posObj.getWorldPosition(_pGlob.vec3Tmp);
    } else {
        // empty input means: don't change the position
        var worldPos = camera.getWorldPosition(_pGlob.vec3Tmp);
    }

    if (Array.isArray(targetOrObj)) {
        var worldTarget = _pGlob.vec3Tmp2.fromArray(targetOrObj);
        worldTarget = coordsTransform(worldTarget, getCoordSystem(), 'Y_UP_RIGHT');
    } else {
        var targObj = getObjectByName(targetOrObj);
        if (!targObj) return;
        var worldTarget = targObj.getWorldPosition(_pGlob.vec3Tmp2);
    }

    duration = Math.max(0, duration);

    if (appInstance.controls && appInstance.controls.tween) {
        // orbit and flying cameras
        if (!appInstance.controls.inTween) {
            appInstance.controls.tween(worldPos, worldTarget, duration, doSlot,
                    movementType);
        }
    } else {
        // TODO: static camera, just position it for now
        if (camera.parent) {
            camera.parent.worldToLocal(worldPos);
        }
        camera.position.copy(worldPos);
        camera.lookAt(worldTarget);
        doSlot();
    }
}

// callJSFunction puzzle
function getJSFunction(funcName) {
    var jsFunc = appInstance.ExternalInterface[funcName];
    if (typeof jsFunc == "function")
        return jsFunc;
    else
        return function() {};
}

// setTimeout puzzle
function registerSetTimeout(timeout, callback) {
    window.setTimeout(callback, 1000 * timeout);
}

/**
 * Retreive standard accessible textures for MeshNodeMaterial or MeshStandardMaterial.
 * If "collectSameNameMats" is true then all materials in the scene with the given name will
 * be used for collecting textures, otherwise will be used only the first found material (default behavior).
 */
function matGetEditableTextures(matName, collectSameNameMats) {

    var mats = [];
    if (collectSameNameMats) {
        mats = v3d.SceneUtils.getMaterialsByName(appInstance, matName);
    } else {
        var firstMat = v3d.SceneUtils.getMaterialByName(appInstance, matName);
        if (firstMat !== null) {
            mats = [firstMat];
        }
    }

    var textures = mats.reduce(function(texArray, mat) {
        var matTextures = [];
        switch (mat.type) {
            case 'MeshNodeMaterial':
                matTextures = Object.values(mat.nodeTextures);
                break;

            case 'MeshStandardMaterial':
                matTextures = [
                    mat.map, mat.lightMap, mat.aoMap, mat.emissiveMap,
                    mat.bumpMap, mat.normalMap, mat.displacementMap,
                    mat.roughnessMap, mat.metalnessMap, mat.alphaMap, mat.envMap
                ]
                break;

            default:
                console.error('matGetEditableTextures: Unknown material type ' + mat.type);
                break;
        }

        Array.prototype.push.apply(texArray, matTextures);
        return texArray;
    }, []);

    return textures.filter(function(elem) {
        // check Texture type exactly
        return elem && (elem.constructor == v3d.Texture
                || elem.constructor == v3d.CompressedTexture
                || elem.constructor == v3d.DataTexture
                || elem.constructor == v3d.CanvasTexture
                || elem.constructor == v3d.VideoTexture);
    });
}

/**
 * Replace accessible textures for MeshNodeMaterial or MeshStandardMaterial
 */
function matReplaceEditableTexture(mat, oldTex, newTex) {

    switch (mat.type) {
        case 'MeshNodeMaterial':
            for (var name in mat.nodeTextures) {
                if (mat.nodeTextures[name] == oldTex) {
                    mat.nodeTextures[name] = newTex;
                }
            }

            break;

        case 'MeshStandardMaterial':

            var texNames = ['map', 'lightMap', 'aoMap', 'emissiveMap',
                            'bumpMap', 'normalMap', 'displacementMap', 'roughnessMap',
                            'metalnessMap', 'alphaMap', 'envMap'];

            texNames.forEach(function(name) {
                if (mat[name] == oldTex) {
                    mat[name] = newTex;
                }
            });

            break;

        default:
            console.error('matReplaceEditableTexture: Unsupported material type ' + mat.type);
            break;
    }

    // inherit some save params
    newTex.encoding = oldTex.encoding;
    newTex.wrapS = oldTex.wrapS;
    newTex.wrapT = oldTex.wrapT;

}

// replaceTexture puzzle
function replaceTexture(matName, texName, texUrlOrElem, doCb) {

    const textures = matGetEditableTextures(matName, true).filter(function(elem) {
        return elem.name == texName;
    });

    if (!textures.length)
        return;

    const mats = v3d.SceneUtils.getMaterialsByName(appInstance, matName);

    if (texUrlOrElem instanceof Promise) {

        texUrlOrElem.then(function(response) {
           processImageUrl(response);
        }, function(error) {});

    } else if (typeof texUrlOrElem == 'string') {

        processImageUrl(texUrlOrElem);

    /**
     * NOTE: not checking for the MediaHTML5 constructor, because otherwise this
     * puzzle would always provide the code that's not needed most of the time
     */
    } else if (texUrlOrElem instanceof Object && texUrlOrElem.source
            instanceof HTMLVideoElement) {

        processVideo(texUrlOrElem.source);

    } else if (texUrlOrElem instanceof HTMLCanvasElement) {

        processCanvas(texUrlOrElem);

    } else {

        return;

    }

    function processImageUrl(url) {

        const isHDR = (url.search(/\.hdr$/) > 0);
        const isComp = (url.search(/\.ktx2/) > 0);

        let isCompOld = false;
        let isVideoOld = false;
        textures.forEach(function(elem) {
            if (elem.isCompressedTexture)
                isCompOld = true;
            if (elem.isVideoTexture)
                isVideoOld = true;
        });

        let loader;

        if (!isHDR && !isComp && !isCompOld && !isVideoOld) {
            loader = new v3d.ImageLoader();
            loader.setCrossOrigin('Anonymous');
        } else if (isComp) {
            loader = appInstance.loader.ktx2Loader;
            loader.setCrossOrigin('Anonymous');
        } else if (isCompOld || isVideoOld) {
            loader = new v3d.TextureLoader();
            loader.setCrossOrigin('Anonymous');
        } else {
            loader = new v3d.FileLoader();
            loader.setResponseType('arraybuffer');
        }

        loader.load(url, function(loadedData) {

            textures.forEach(function(elem) {

                elem.dispose();

                if (!isHDR && !isComp && !isCompOld && !isVideoOld) {

                    elem.image = loadedData;

                } else if (isComp || isCompOld || isVideoOld) {

                    mats.forEach(function(mat) {
                        loadedData.flipY = false;
                        loadedData.name = texName;
                        matReplaceEditableTexture(mat, elem, loadedData);
                        mat.needsUpdate = true;
                    });

                } else {

                    // parse loaded HDR buffer
                    var rgbeLoader = new v3d.RGBELoader();
                    var texData = rgbeLoader.parse(loadedData);

                    elem.image = {
                        data: texData.data,
                        width: texData.width,
                        height: texData.height
                    }

                    elem.magFilter = v3d.LinearFilter;
                    elem.minFilter = v3d.LinearFilter;
                    elem.generateMipmaps = false;
                    elem.isDataTexture = true;
                }

                // update world material if it is using this texture
                if (appInstance.scene !== null && appInstance.scene.worldMaterial !== null) {
                    var wMat = appInstance.scene.worldMaterial;
                    for (let texName in wMat.nodeTextures) {
                        if (wMat.nodeTextures[texName] == elem) {
                            appInstance.updateEnvironment(wMat);
                        }
                    }
                }
            });

            // exec once
            doCb();

        });
    }

    function processVideo(elem) {
        const videoTex = new v3d.VideoTexture(elem);
        videoTex.flipY = false;
        videoTex.name = texName;

        let videoAssigned = false;

        var mats = v3d.SceneUtils.getMaterialsByName(appInstance, matName);
        mats.forEach(function(mat) {

            textures.forEach(function(tex) {
                matReplaceEditableTexture(mat, tex, videoTex);
            });

            mat.needsUpdate = true;
            // HACK: to assign new encoding in nodes, workaround for https://crbug.com/1256340
            // HACK: preserve links to uniform arrays which got replaced in updateNodeGraph()
            if (mat.isMeshNodeMaterial) {
                const nodeRGBArrSave = mat.nodeRGBArr;
                const nodeValueSave = mat.nodeValue;
                mat.updateNodeGraph();
                mat.nodeRGBArr = nodeRGBArrSave;
                mat.nodeValue = nodeValueSave;
            }

            videoAssigned = true;
        });

        if (videoAssigned) {
            if (elem.readyState < 1) {
                elem.addEventListener('loadedmetadata', () => {
                    doCb();
                });
            } else {
                doCb();
            }
        }

    }

    function processCanvas(elem) {
        const canvasTex = new v3d.CanvasTexture(elem);
        canvasTex.flipY = false;
        canvasTex.name = texName;

        let canvasAssigned = false;

        var mats = v3d.SceneUtils.getMaterialsByName(appInstance, matName);
        mats.forEach(function(mat) {

            textures.forEach(function(tex) {
                matReplaceEditableTexture(mat, tex, canvasTex);
            });

            mat.needsUpdate = true;
            canvasAssigned = true;
        });

        if (canvasAssigned) {

            if (v3d.PL) {
                v3d.PL.canvasTextures = v3d.PL.canvasTextures || {};
                v3d.PL.canvasTextures[canvasTex.image.id] = canvasTex;
            }

            doCb();
        }

    }
}

// utility functions envoked by the HTML puzzles
function getElements(ids, isParent) {
    var elems = [];
    if (Array.isArray(ids) && ids[0] != 'CONTAINER' && ids[0] != 'WINDOW' &&
        ids[0] != 'DOCUMENT' && ids[0] != 'BODY' && ids[0] != 'QUERYSELECTOR') {
        for (var i = 0; i < ids.length; i++)
            elems.push(getElement(ids[i], isParent));
    } else {
        elems.push(getElement(ids, isParent));
    }
    return elems;
}

function getElement(id, isParent) {
    var elem;
    if (Array.isArray(id) && id[0] == 'CONTAINER') {
        if (appInstance !== null) {
            elem = appInstance.container;
        } else if (typeof _initGlob !== 'undefined') {
            // if we are on the initialization stage, we still can have access
            // to the container element
            var id = _initGlob.container;
            if (isParent) {
                elem = parent.document.getElementById(id);
            } else {
                elem = document.getElementById(id);
            }
        }
    } else if (Array.isArray(id) && id[0] == 'WINDOW') {
        if (isParent)
            elem = parent;
        else
            elem = window;
    } else if (Array.isArray(id) && id[0] == 'DOCUMENT') {
        if (isParent)
            elem = parent.document;
        else
            elem = document;
    } else if (Array.isArray(id) && id[0] == 'BODY') {
        if (isParent)
            elem = parent.document.body;
        else
            elem = document.body;
    } else if (Array.isArray(id) && id[0] == 'QUERYSELECTOR') {
        if (isParent)
            elem = parent.document.querySelector(id);
        else
            elem = document.querySelector(id);
    } else {
        if (isParent)
            elem = parent.document.getElementById(id);
        else
            elem = document.getElementById(id);
    }
    return elem;
}

// eventHTMLElem puzzle
function eventHTMLElem(eventType, ids, isParent, callback) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem)
            continue;
        elem.addEventListener(eventType, callback);
        if (v3d.PL.editorEventListeners)
            v3d.PL.editorEventListeners.push([elem, eventType, callback]);
    }
}

function cf_pdf() {
    return (function (content, callbacks, cssStyle, additionalStyles) {

            content();

            let css_palette = '';
            if (cssStyle == 'basic') {
                css_palette = `<style>.pdf__wrapper-hidden{display:none;}#cf-pdf-generated{overflow:scroll}#cf-pdf-generated *{color:#222}#cf-pdf-generated .pdf__bg-light{background:#f0f0f0}#cf-pdf-generated .pdf__page{width:795px;max-width:795px;min-width:795px;height:1122.5px;max-height:1122.5px;min-height:1122.5px;box-sizing:border-box;background:#fff;display:flex;flex-direction:column}#cf-pdf-generated .pdf__page .pdf__header{display:flex;justify-content:center;align-items:center;padding-top:40px}#cf-pdf-generated .pdf__page .pdf__header .logo{height:62px}#cf-pdf-generated .pdf__page#pdf-page-0 .pdf__header .logo #cf-pdf-generated .pdf__page .pdf__main{flex:1;display:flex;flex-direction:column;margin-top:50px}#cf-pdf-generated .pdf__page .pdf__main .pdf__section{flex:1;padding:40px 80px}#cf-pdf-generated .pdf__page .pdf__main .pdf__section-lines{counter-reset:lines;padding:0}#cf-pdf-generated .pdf__page .pdf__main .pdf__section-lines .pdf__image img{width:100%}#cf-pdf-generated .pdf__page .pdf__main .pdf__section-lines .pdf__line{padding:12px 0;padding-left:90px;display:flex;justify-content:space-between;} #cf-pdf-generated .pdf__page .pdf__main .pdf__section-lines .pdf__line > *{flex:1;}#cf-pdf-generated .pdf__page .pdf__main .pdf__section-lines .pdf__line-name{font-weight:400;font-size:18px;line-height:24px;position:relative}#cf-pdf-generated .pdf__page .pdf__main .pdf__section-lines .pdf__line-name:before{counter-increment:lines;content:counter(lines,decimal-leading-zero);position:absolute;color:#222;opacity:.55;top:-13px;left:-15px;font-size:9px}#cf-pdf-generated .pdf__page .pdf__main .pdf__section-lines .pdf__line-value{display:flex;align-items:center;font-weight:600;font-size:18px}#cf-pdf-generated .pdf__page .pdf__main .pdf__section-lines .pdf__line-value .info{font-weight:300;font-size:10px;width:120px;margin-left:30px;color:#bfbfbf;align-self:flex-start}#cf-pdf-generated .pdf__page .pdf__main .pdf__section-lines .pdf__line-value .info a{color:#998671;text-decoration:underline}#cf-pdf-generated .pdf__page .pdf__main .pdf__section-lines .pdf__line:nth-child(odd){background:#f0f0f0}#cf-pdf-generated .pdf__page .pdf__footer{display:flex;padding:15px 60px;font-weight:500;font-size:12px;line-height:20px}#cf-pdf-generated .pdf__page .pdf__footer p{color:#222!important}${additionalStyles}</style>`;
            } else if (cssStyle == 'dev_basic') {
                css_palette = `<style>.pdf__wrapper-hidden{display:flex;position:fixed;left:0;top:0;height:100%;}#cf-pdf-generated{overflow:scroll}#cf-pdf-generated *{color:#222}#cf-pdf-generated .pdf__bg-light{background:#f0f0f0}#cf-pdf-generated .pdf__page{width:795px;max-width:795px;min-width:795px;height:1122.5px;max-height:1122.5px;min-height:1122.5px;box-sizing:border-box;background:#fff;display:flex;flex-direction:column}#cf-pdf-generated .pdf__page .pdf__header{display:flex;justify-content:center;align-items:center;padding-top:40px}#cf-pdf-generated .pdf__page .pdf__header .logo{height:62px}#cf-pdf-generated .pdf__page#pdf-page-0 .pdf__header .logo #cf-pdf-generated .pdf__page .pdf__main{flex:1;display:flex;flex-direction:column;margin-top:50px}#cf-pdf-generated .pdf__page .pdf__main .pdf__section{flex:1;padding:40px 80px}#cf-pdf-generated .pdf__page .pdf__main .pdf__section-lines{counter-reset:lines;padding:0}#cf-pdf-generated .pdf__page .pdf__main .pdf__section-lines .pdf__image img{width:100%}#cf-pdf-generated .pdf__page .pdf__main .pdf__section-lines .pdf__line{padding:12px 0;padding-left:90px;display:flex;justify-content:space-between;} #cf-pdf-generated .pdf__page .pdf__main .pdf__section-lines .pdf__line > *{flex:1;}#cf-pdf-generated .pdf__page .pdf__main .pdf__section-lines .pdf__line-name{font-weight:400;font-size:18px;line-height:24px;position:relative}#cf-pdf-generated .pdf__page .pdf__main .pdf__section-lines .pdf__line-name:before{counter-increment:lines;content:counter(lines,decimal-leading-zero);position:absolute;color:#222;opacity:.55;top:-13px;left:-15px;font-size:9px}#cf-pdf-generated .pdf__page .pdf__main .pdf__section-lines .pdf__line-value{display:flex;align-items:center;font-weight:600;font-size:18px}#cf-pdf-generated .pdf__page .pdf__main .pdf__section-lines .pdf__line-value .info{font-weight:300;font-size:10px;width:120px;margin-left:30px;color:#bfbfbf;align-self:flex-start}#cf-pdf-generated .pdf__page .pdf__main .pdf__section-lines .pdf__line-value .info a{color:#998671;text-decoration:underline}#cf-pdf-generated .pdf__page .pdf__main .pdf__section-lines .pdf__line:nth-child(odd){background:#f0f0f0}#cf-pdf-generated .pdf__page .pdf__footer{display:flex;padding:15px 60px;font-weight:500;font-size:12px;line-height:20px}#cf-pdf-generated .pdf__page .pdf__footer p{color:#222!important}${additionalStyles}</style>`;
            }


            let pdfTemplate = `${css_palette}<div id="cf-pdf-wrapper" class="pdf__wrapper-hidden">
    <div id="cf-pdf-generated">${window.pdfGenerate.pages.join('')}</div>
</div>`;

            let old = document.querySelector('#cf-pdf-wrapper');
            if (old) {
                old.remove();
            }
            document.body.insertAdjacentHTML('beforeend', pdfTemplate);

            let pageCount = window.pdfGenerate.pages.length;
            function next() {
                if (window['html2pdf'] !== undefined) {
                    let element = document.querySelector('#cf-pdf-generated');
                    let options = {
                        pagebreak: { mode: 'avoid-all' },
                        filename: 'tmp-cfpdf.pdf',
                        jsPdf: {
                            orientation: 'p',
                            unit: 'px',
                            format: 'a4',
                            putOnlyUsedFonts: true,
                        },
                        html2canvas: {
                            windowWidth: 1440,
                            windowHeight: 900,
                            width: 794,
                            height: 1122.5 * pageCount
                        },
                        enableLinks: true
                    };
                    let pdfReady = html2pdf().set(options).from(element).outputPdf().then(function (pdf) {
                        let pdfBase64 = btoa(pdf);
                        pdfBase64 = 'data:application/pdf;base64,' + pdfBase64;

                        if (!window.cfPdf) {
                            window.cfPdf = {};
                        }
                        window.cfPdf.source = pdfBase64;

                        callbacks();
                    });
                }
            }

            //adding script
            if (document.querySelector('script#cfPdf_core')) {
                next();
            } else {
                var script = document.createElement('script');
                script.type = 'application/javascript';
                script.src = 'https://dendrofen.github.io/verge3d/html2pdf.bundle.js';
                script.id = 'cfPdf_core';
                script.onload = function () {
                    next();
                };
                document.head.appendChild(script);
            }
        }).apply(null, arguments);
}

function cf_pdf_get() {
    return (function () {
            let out = '';
            if(window.cfPdf){
                out = window.cfPdf.source;
            }
            return out;
        }).apply(null, arguments);
}

var parseDataUriRe = /^data:(.+\/.+);base64,(.*)$/;

/**
 * Check if object is a Data URI string
 */
function checkDataUri(obj) {
    // NOTE: checking with parseDataUriRe is slow
    return (typeof obj === 'string' && obj.indexOf('data:') == 0);
}

/**
 * Check if object is a URI to a Blob object
 */
function checkBlobUri(obj) {
    return (typeof obj === 'string' && obj.indexOf('blob:') == 0);
}

/**
 * First we use encodeURIComponent to get percent-encoded UTF-8,
 * then we convert the percent encodings into raw bytes which can be fed into btoa
 * https://bit.ly/3dvpq60
 */
function base64EncodeUnicode(str) {
    return btoa(encodeURIComponent(str).replace(/%([0-9A-F]{2})/g,
        function toSolidBytes(match, p1) {
            return String.fromCharCode('0x' + p1);
    }));
}

/**
 * Going backwards: from bytestream, to percent-encoding, to original string
 * https://bit.ly/3dvpq60
 */
function base64DecodeUnicode(str) {
    return decodeURIComponent(atob(str).split('').map(function(c) {
        return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
    }).join(''));
}

/**
 * Convert object or string to application/json Data URI
 */
function toJSONDataUri(obj, mime='application/json') {
    if (typeof obj !== 'string')
        obj = JSON.stringify(obj);
    return 'data:' + mime + ';base64,' + base64EncodeUnicode(obj);
}

/**
 * Convert object or string to application/json Data URI
 */
function toTextDataUri(obj) {
    if (typeof obj !== 'string')
        obj = JSON.stringify(obj);
    return 'data:text/plain;base64,' + base64EncodeUnicode(obj);
}

/**
 * Extract text data from Data URI
 */
function extractDataUriData(str) {
    var matches = str.match(parseDataUriRe);
    return base64DecodeUnicode(matches[2]);
}

// downloadFile puzzle
function downloadFile(contents, filename) {
    if (!filename)
        return;

    if (contents instanceof Promise) {

        contents.then(function(response) {

            doDownload(response, filename);

        }, function(error) {});

    } else {

        doDownload(contents, filename);

    }

    function doDownload(contents, filename) {
        if (typeof contents !== 'string') {
            contents = toJSONDataUri(contents);
        } else if (!checkDataUri(contents) && !checkBlobUri(contents)) {
            contents = toTextDataUri(contents);
        }

        var link = document.createElement('a');
        link.href = contents;
        link.download = filename;
        document.body.appendChild(link);
        link.click();
    }
}

// isSceneLoaded puzzle
function isSceneLoaded(url) {
    if (appInstance.scene) {
        var scene = url === '' ? appInstance.scene : appInstance.scene.getObjectByName(url);
        if (scene)
            return true;
        else
            return false;
    } else {
        return false;
    }
}

// setObjTransform puzzle
function setObjTransform(objSelector, isWorldSpace, mode, vector, offset){
    var x = vector[0];
      var y = vector[1];
      var z = vector[2];

    var objNames = retrieveObjectNames(objSelector);

    function setObjProp(obj, prop, val) {
        if (!offset) {
            obj[mode][prop] = val;
        } else {
            if (mode != "scale")
                obj[mode][prop] += val;
            else
                obj[mode][prop] *= val;
        }
    }

    var inputsUsed = _pGlob.vec3Tmp.set(Number(x !== ''), Number(y !== ''),
            Number(z !== ''));
    var coords = _pGlob.vec3Tmp2.set(x || 0, y || 0, z || 0);

    if (mode === 'rotation') {
        // rotations are specified in degrees
        coords.multiplyScalar(v3d.MathUtils.DEG2RAD);
    }

    var coordSystem = getCoordSystem();

    coordsTransform(inputsUsed, coordSystem, 'Y_UP_RIGHT', true);
    coordsTransform(coords, coordSystem, 'Y_UP_RIGHT', mode === 'scale');

    for (var i = 0; i < objNames.length; i++) {

        var objName = objNames[i];
        if (!objName) continue;

        var obj = getObjectByName(objName);
        if (!obj) continue;

        if (isWorldSpace && obj.parent) {
            obj.matrixWorld.decomposeE(obj.position, obj.rotation, obj.scale);

            if (inputsUsed.x) setObjProp(obj, "x", coords.x);
            if (inputsUsed.y) setObjProp(obj, "y", coords.y);
            if (inputsUsed.z) setObjProp(obj, "z", coords.z);

            obj.matrixWorld.composeE(obj.position, obj.rotation, obj.scale);
            obj.matrix.multiplyMatrices(_pGlob.mat4Tmp.copy(obj.parent.matrixWorld).invert(), obj.matrixWorld);
            obj.matrix.decompose(obj.position, obj.quaternion, obj.scale);

        } else if (mode === 'rotation' && coordSystem == 'Z_UP_RIGHT') {
            // Blender/Max coordinates

            // need all the rotations for order conversions, especially if some
            // inputs are not specified
            var euler = eulerV3DToBlenderShortest(obj.rotation, _pGlob.eulerTmp);
            coordsTransform(euler, coordSystem, 'Y_UP_RIGHT');

            if (inputsUsed.x) euler.x = offset ? euler.x + coords.x : coords.x;
            if (inputsUsed.y) euler.y = offset ? euler.y + coords.y : coords.y;
            if (inputsUsed.z) euler.z = offset ? euler.z + coords.z : coords.z;

            /**
             * convert from Blender/Max default XYZ extrinsic order to v3d XYZ
             * intrinsic with reversion (XYZ -> ZYX) and axes swizzling (ZYX -> YZX)
             */
            euler.order = "YZX";
            euler.reorder(obj.rotation.order);
            obj.rotation.copy(euler);

        } else if (mode === 'rotation' && coordSystem == 'Y_UP_RIGHT') {
            // Maya coordinates

            // Use separate rotation interface to fix ambiguous rotations for Maya,
            // might as well do the same for Blender/Max.

            var rotUI = RotationInterface.initObject(obj);
            var euler = rotUI.getUserRotation(_pGlob.eulerTmp);
            // TODO(ivan): this probably needs some reasonable wrapping
            if (inputsUsed.x) euler.x = offset ? euler.x + coords.x : coords.x;
            if (inputsUsed.y) euler.y = offset ? euler.y + coords.y : coords.y;
            if (inputsUsed.z) euler.z = offset ? euler.z + coords.z : coords.z;

            rotUI.setUserRotation(euler);
            rotUI.getActualRotation(obj.rotation);
        } else {
            if (inputsUsed.x) setObjProp(obj, "x", coords.x);
            if (inputsUsed.y) setObjProp(obj, "y", coords.y);
            if (inputsUsed.z) setObjProp(obj, "z", coords.z);

        }

        obj.updateMatrixWorld(true);
    }

}

// appendScene puzzle
function appendScene(url, sceneName, loadCameras, loadLights, loadCb, progCb, errorCb) {
    _pGlob.percentage = 0;

    appInstance.appendScene(url, function(loadedScene) {
        loadedScene.name = sceneName;
        _pGlob.percentage = 100;
        loadCb();
    }, function(percentage) {
        _pGlob.percentage = percentage;
        progCb();
    }, errorCb, loadCameras, loadLights);
}

function intersectPlaneCSS(plane, cssX, cssY, dest) {
    var coords = _pGlob.vec2Tmp;
    var rc = _pGlob.raycasterTmp;
    coords.x = (cssX / appInstance.getWidth()) * 2 - 1;
    coords.y = - (cssY / appInstance.getHeight()) * 2 + 1;
    rc.setFromCamera(coords, appInstance.getCamera(true));
    return rc.ray.intersectPlane(plane, dest);
}

// dragMove puzzle
_pGlob.dragMoveOrigins = {};

function dragMove(objSelector, mode, blockId, parentDragOverBlockId) {
    var camera = appInstance.getCamera();
    if (!camera)
        return;

    if (!_pGlob.objDragOverInfoByBlock)
        return;

    var objNames = retrieveObjectNames(objSelector);

    var info = _pGlob.objDragOverInfoByBlock[parentDragOverBlockId];
    if (!info) return;

    var draggedObj = getObjectByName(info.draggedObjName);
    if (!draggedObj) return;

    if (!(blockId in _pGlob.dragMoveOrigins)) {
        _pGlob.dragMoveOrigins[blockId] = [];
    }
    var posOrigins = _pGlob.dragMoveOrigins[blockId];
    var lenDiff = objNames.length - posOrigins.length;
    for (var i = 0; i < lenDiff; i++) {
        posOrigins.push(new v3d.Vector3());
    }

    for (var i = 0; i < objNames.length; i++) {
        var obj = getObjectByName(objNames[i]);
        if (!obj) {
            continue;
        }

        var posOrigin = posOrigins[i];

        if (!info.isMoved) {
            // the object position before the first move is used as an initial value
            posOrigin.copy(obj.position);
        }

        var coordSystem = getCoordSystem();

        if (mode == "X" || mode == "Y" || mode == "Z") {

            if (coordSystem == 'Z_UP_RIGHT') {
                var axis = mode == "X" ? _pGlob.AXIS_X : (mode == "Y" ? _pGlob.AXIS_Z : _pGlob.AXIS_Y);
                var coord = mode == "X" ? "x" : (mode == "Y" ? "z" : "y");
            } else {
                var axis = mode == "X" ? _pGlob.AXIS_X : (mode == "Y" ? _pGlob.AXIS_Y : _pGlob.AXIS_Z);
                var coord = mode == "X" ? "x" : (mode == "Y" ? "y" : "z");
            }

            var planeNor = camera.getWorldDirection(_pGlob.vec3Tmp);
            planeNor.cross(axis).cross(axis);
            var plane = _pGlob.planeTmp.setFromNormalAndCoplanarPoint(planeNor, draggedObj.position);

            var p0 = intersectPlaneCSS(plane, info.downX, info.downY, _pGlob.vec3Tmp);
            var p1 = intersectPlaneCSS(plane, info.currX, info.currY, _pGlob.vec3Tmp2);
            if (p0 && p1) {
                obj.position[coord] = posOrigin[coord] + p1[coord] - p0[coord];
            }
        } else if (mode == "XY" || mode == "XZ" || mode == "YZ") {
            if (coordSystem == 'Z_UP_RIGHT') {
                var normal = mode == "XY" ? _pGlob.AXIS_Y : (mode == "XZ" ? _pGlob.AXIS_Z : _pGlob.AXIS_X);
                var coord0 = mode == "XY" ? "x" : (mode == "XZ" ? "x" : "y");
                var coord1 = mode == "XY" ? "z" : (mode == "XZ" ? "y" : "z");
            } else {
                var normal = mode == "XY" ? _pGlob.AXIS_Z : (mode == "XZ" ? _pGlob.AXIS_Y : _pGlob.AXIS_X);
                var coord0 = mode == "XY" ? "x" : (mode == "XZ" ? "x" : "y");
                var coord1 = mode == "XY" ? "y" : (mode == "XZ" ? "z" : "z");
            }

            var plane = _pGlob.planeTmp.setFromNormalAndCoplanarPoint(normal, draggedObj.position);

            var p0 = intersectPlaneCSS(plane, info.downX, info.downY, _pGlob.vec3Tmp);
            var p1 = intersectPlaneCSS(plane, info.currX, info.currY, _pGlob.vec3Tmp2);
            if (p0 && p1) {
                obj.position[coord0] = posOrigin[coord0] + p1[coord0] - p0[coord0];
                obj.position[coord1] = posOrigin[coord1] + p1[coord1] - p0[coord1];
            }
        } else if (mode == "XYZ") {
            var planeNor = camera.getWorldDirection(_pGlob.vec3Tmp);
            var plane = _pGlob.planeTmp.setFromNormalAndCoplanarPoint(planeNor, draggedObj.position);

            var p0 = intersectPlaneCSS(plane, info.downX, info.downY, _pGlob.vec3Tmp);
            var p1 = intersectPlaneCSS(plane, info.currX, info.currY, _pGlob.vec3Tmp2);
            if (p0 && p1) {
                obj.position.addVectors(posOrigin, p1).sub(p0);
            }
        }
        obj.updateMatrixWorld(true);
    }
}

// utility function used by the whenClicked, whenHovered and whenDraggedOver puzzles
function initObjectPicking(callback, eventType, mouseDownUseTouchStart, mouseButtons) {

    var elem = appInstance.renderer.domElement;
    elem.addEventListener(eventType, pickListener);
    if (v3d.PL.editorEventListeners)
        v3d.PL.editorEventListeners.push([elem, eventType, pickListener]);

    if (eventType == 'mousedown') {

        var touchEventName = mouseDownUseTouchStart ? 'touchstart' : 'touchend';
        elem.addEventListener(touchEventName, pickListener);
        if (v3d.PL.editorEventListeners)
            v3d.PL.editorEventListeners.push([elem, touchEventName, pickListener]);

    } else if (eventType == 'dblclick') {

        var prevTapTime = 0;

        function doubleTapCallback(event) {

            var now = new Date().getTime();
            var timesince = now - prevTapTime;

            if (timesince < 600 && timesince > 0) {

                pickListener(event);
                prevTapTime = 0;
                return;

            }

            prevTapTime = new Date().getTime();
        }

        var touchEventName = mouseDownUseTouchStart ? 'touchstart' : 'touchend';
        elem.addEventListener(touchEventName, doubleTapCallback);
        if (v3d.PL.editorEventListeners)
            v3d.PL.editorEventListeners.push([elem, touchEventName, doubleTapCallback]);
    }

    var raycaster = new v3d.Raycaster();

    function pickListener(event) {

        // to handle unload in loadScene puzzle
        if (!appInstance.getCamera())
            return;

        event.preventDefault();

        var xNorm = 0, yNorm = 0;
        if (event instanceof MouseEvent) {
            if (mouseButtons && mouseButtons.indexOf(event.button) == -1)
                return;
            xNorm = event.offsetX / elem.clientWidth;
            yNorm = event.offsetY / elem.clientHeight;
        } else if (event instanceof TouchEvent) {
            var rect = elem.getBoundingClientRect();
            xNorm = (event.changedTouches[0].clientX - rect.left) / rect.width;
            yNorm = (event.changedTouches[0].clientY - rect.top) / rect.height;
        }

        _pGlob.screenCoords.x = xNorm * 2 - 1;
        _pGlob.screenCoords.y = -yNorm * 2 + 1;
        raycaster.setFromCamera(_pGlob.screenCoords, appInstance.getCamera(true));
        var objList = [];
        appInstance.scene.traverse(function(obj){objList.push(obj);});
        var intersects = raycaster.intersectObjects(objList, false);
        callback(intersects, event);
    }
}

function objectsIncludeObj(objNames, testedObjName) {
    if (!testedObjName) return false;

    for (var i = 0; i < objNames.length; i++) {
        if (testedObjName == objNames[i]) {
            return true;
        } else {
            // also check children which are auto-generated for multi-material objects
            var obj = getObjectByName(objNames[i]);
            if (obj && obj.type == "Group") {
                for (var j = 0; j < obj.children.length; j++) {
                    if (testedObjName == obj.children[j].name) {
                        return true;
                    }
                }
            }
        }
    }
    return false;
}

// utility function used by the whenClicked, whenHovered, whenDraggedOver, and raycast puzzles
function getPickedObjectName(obj) {
    // auto-generated from a multi-material object, use parent name instead
    if (obj.isMesh && obj.isMaterialGeneratedMesh && obj.parent) {
        return obj.parent.name;
    } else {
        return obj.name;
    }
}

function eventGetOffsetCoords(e, touchId, dest) {
    if (e instanceof MouseEvent) {
        dest.set(e.offsetX, e.offsetY);
    } else if (window.TouchEvent && e instanceof TouchEvent) {
        var rect = e.target.getBoundingClientRect();
        var touches = e.touches;
        if (e.type == "touchstart" || e.type == "touchend" || e.type == "touchmove") {
            touches = e.changedTouches;
        }

        var touch = touches[0];
        for (var i = 0; i < touches.length; i++) {
            if (touches[i].identifier == touchId) {
                touch = touches[i];
                break;
            }
        }

        dest.set(touch.clientX - rect.left, touch.clientY - rect.top);
    }
    return dest;
}

function eventTouchIdGetFirst(e) {
    if (e instanceof MouseEvent) {
        return -1;
    } else if (window.TouchEvent && e instanceof TouchEvent) {
        if (e.type == "touchstart" || e.type == "touchend" || e.type == "touchmove") {
            return e.changedTouches[0].identifier;
        } else {
            return e.touches[0].identifier;
        }
    }
    return -1;
}

/**
 * For "touchstart", "touchend" and "touchmove" events returns true if a touch
 * object with the provided touch id is in the changedTouches array, otherwise
 * - false. For other events returns true.
 */
function eventTouchIdChangedFilter(e, touchId) {
    if (window.TouchEvent && e instanceof TouchEvent) {
        if (e.type == "touchstart" || e.type == "touchend" || e.type == "touchmove") {
            var isChanged = false;
            for (var i = 0; i < e.changedTouches.length; i++) {
                if (e.changedTouches[i].identifier == touchId) {
                    isChanged = true;
                    break;
                }
            }
            return isChanged;
        }
    }

    return true;
}

function initDragOverInfo() {
    return {
        draggedObjName: '',
        downX: 0, downY: 0,
        prevX: 0, prevY: 0,
        currX: 0, currY: 0,
        isDowned: false,
        isMoved: false,
        touchId: -1
    };
}

// whenDraggedOver puzzle
_pGlob.objDragOverInfoGlobal = [];
_pGlob.objDragOverInfoByBlock = {}

initObjectPicking(function(intersects, downEvent) {

    _pGlob.objDragOverInfoGlobal.forEach(function(el) {

        if (downEvent instanceof MouseEvent)
            if (el.mouseButtons.indexOf(downEvent.button) == -1)
                return;

        var maxIntersects = el.xRay ? intersects.length : Math.min(1, intersects.length);

        for (var i = 0; i < maxIntersects; i++) {
            var obj = intersects[i].object;
            var objName = getPickedObjectName(obj);

            if (objectsIncludeObj([el.objName], objName)) {
                el.callback({ downEvent: downEvent, draggedObjName: objName });
            }

        }

    });

}, 'mousedown', true);

// whenDraggedOver puzzle
function registerOnDrag(objSelector, xRay, mouseButtons, cbStart, cbMove, cbDrop, blockId) {

    var cb = function(cbParam) {

        if (appInstance.controls) {
            appInstance.controls.enabled = false;
        }

        if (!(blockId in _pGlob.objDragOverInfoByBlock)) {
            _pGlob.objDragOverInfoByBlock[blockId] = initDragOverInfo();
        }
        var info = _pGlob.objDragOverInfoByBlock[blockId];

        // NOTE: don't use more than one pointing event, e.g. don't process
        // some events related to multitouch actions
        if (info.isDowned) {
            return;
        }

        var touchId = eventTouchIdGetFirst(cbParam.downEvent);
        var coords = eventGetOffsetCoords(cbParam.downEvent, touchId,
                _pGlob.vec2Tmp);

        info.downX = info.prevX = info.currX = coords.x;
        info.downY = info.prevY = info.currY = coords.y;
        info.touchId = touchId;
        info.isDowned = true;
        info.isMoved = false;
        info.draggedObjName = cbParam.draggedObjName;

        cbStart(cbParam.downEvent);

        var elem = appInstance.container;

        var moveCb = function(e) {
            if (!eventTouchIdChangedFilter(e, info.touchId)) {
                // don't handle events not intended for this particular touch
                return;
            }

            var coords = eventGetOffsetCoords(e, info.touchId, _pGlob.vec2Tmp);
            info.prevX = info.currX;
            info.prevY = info.currY;
            info.currX = coords.x;
            info.currY = coords.y;
            cbMove(e);
            info.isMoved = true;
        }
        var upCb = function(e) {
            if (!eventTouchIdChangedFilter(e, info.touchId)) {
                // don't handle events not intended for this particular touch
                return;
            }

            var coords = eventGetOffsetCoords(e, info.touchId, _pGlob.vec2Tmp);
            info.currX = coords.x;
            info.currY = coords.y;
            info.prevX = info.currX;
            info.prevY = info.currY;
            cbDrop(e);
            info.isDowned = false;

            elem.removeEventListener('mousemove', moveCb);
            elem.removeEventListener('touchmove', moveCb);
            elem.removeEventListener('mouseup', upCb);
            elem.removeEventListener('touchend', upCb);
            if (appInstance.controls) {
                appInstance.controls.enabled = true;
            }
        }

        elem.addEventListener('mousemove', moveCb);
        elem.addEventListener('touchmove', moveCb);
        elem.addEventListener('mouseup', upCb);
        elem.addEventListener('touchend', upCb);
    }

    var objNames = retrieveObjectNames(objSelector);

    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        _pGlob.objDragOverInfoGlobal.push({
            objName: objName,
            callback: cb,
            xRay: xRay,
            mouseButtons: mouseButtons
        });
    }
}

// FlyingControlsSetProp puzzle
function FlyingControlsSetProp(option,value) {
    if (appInstance.controls && appInstance.controls instanceof v3d.FlyingControls) {
        appInstance.controls[option] = value;
    } else {
        console.error('app controls set prop: Wrong controls type');
    }
}

// dragRotate puzzle
function dragRotate(objSelector, mode, isParentSpace, blockId, parentDragOverBlockId) {
    var camera = appInstance.getCamera(true);
    if (!camera)
        return;

    if (!_pGlob.objDragOverInfoByBlock)
        return;

    var objNames = retrieveObjectNames(objSelector);

    var info = _pGlob.objDragOverInfoByBlock[parentDragOverBlockId];
    if (!info) return;

    var coordSystem = getCoordSystem();

    for (var i = 0; i < objNames.length; i++) {
        var obj = getObjectByName(objNames[i]);
        if (!obj) {
            continue;
        }

        if (mode == "X" || mode == "Y" || mode == "Z") {
            var objPos = obj.getWorldPosition(_pGlob.vec3Tmp);
            objPos.project(camera);

            var objX = (objPos.x + 1) / 2 * appInstance.getWidth();
            var objY = (-objPos.y + 1) / 2 * appInstance.getHeight();
            var vecFrom = _pGlob.vec2Tmp.set(info.prevX - objX, objY - info.prevY);
            var vecTo = _pGlob.vec2Tmp2.set(info.currX - objX, objY - info.currY);

            if (coordSystem == 'Z_UP_RIGHT')
                var axis = _pGlob.vec3Tmp.copy(mode == "X" ? _pGlob.AXIS_X
                        : (mode == "Y" ? _pGlob.AXIS_Z : _pGlob.AXIS_Y));
            else
                var axis = _pGlob.vec3Tmp.copy(mode == "X" ? _pGlob.AXIS_X
                        : (mode == "Y" ? _pGlob.AXIS_Y : _pGlob.AXIS_Z));

            var quat = _pGlob.quatTmp.setFromAxisAngle(axis, vecTo.angle() - vecFrom.angle());

            // a rotation axis pointing backwards (i.e. co-directionally
            // aligned with the view vector) should have inverted rotation
            var objToCalcSpace = isParentSpace && obj.parent ? obj.parent : obj;
            axis.applyQuaternion(objToCalcSpace.getWorldQuaternion(_pGlob.quatTmp2));

            var viewVec = camera.getWorldDirection(_pGlob.vec3Tmp2);
            if (viewVec.dot(axis) > 0) {
                quat.conjugate();
            }

            if (isParentSpace) {
                obj.quaternion.premultiply(quat);
            } else {
                obj.quaternion.multiply(quat);
            }
            obj.updateMatrixWorld(true);
        }
    }
}

// unloadScene puzzle
function unloadScene(url) {
    if (appInstance.scene) {
        var scene = url === '' ? appInstance.scene : appInstance.scene.getObjectByName(url);
        if (scene) appInstance.unload(scene);

        if (!appInstance.scene) appInstance.renderer.clear();

        // clean object cache
        _pGlob.objCache = {};
    }
}

// exportToGLTF puzzle
function exportToGLTF(objSelector, onlyVisible, exportAnims, binary) {

    if (objSelector === '' || objSelector === LIST_NONE) {

        var objs = [appInstance.scene];

    } else {

        var objs = retrieveObjectNames(objSelector).map(function(objName) {
            return getObjectByName(objName);
        });

    }

    if (objs.length) {

        var gltfExporter = new v3d.GLTFExporter();

        var clips = [];

        if (exportAnims) {
            for (var i = 0; i < appInstance.actions.length; i++) {
                var clip = appInstance.actions[i].getClip();
                if (clips.indexOf(clip) == -1)
                    clips.push(clip);
            }
        }

        var options = {
            onlyVisible: onlyVisible,
            binary: binary,
            trs: true,
            animations: clips
        }

        return new Promise(function(resolve, reject) {

            gltfExporter.parse(objs, function(result) {

                var dataUrl;

                if (result instanceof ArrayBuffer) {

                    dataUrl = URL.createObjectURL(new Blob([result], { type: 'application/octet-stream' }));

                } else {

                    dataUrl = toJSONDataUri(result, 'model/gltf+json');

                }

                resolve(dataUrl);

            }, function(error) {

                reject(error);

            }, options);

        });

    };

}

// readJSON puzzle
function readJSON(text) {
    if (checkDataUri(text)) {
        text = extractDataUriData(text);
    }

    try {
        return JSON.parse(text);
    } catch(e) {
        console.error("Read JSON Puzzle: could not interpret data.");
        return null;
    }
}

// loadFile puzzle
_pGlob.loadedFiles = {};

function loadFile(url, callback, caching) {

    const files = _pGlob.loadedFiles;

    if (!url || (typeof url != 'string')) {
        _pGlob.loadedFile = '';
        callback();
    } else if (caching && url in files) {
        _pGlob.loadedFile = files[url];
        callback();
    } else {
        const req = new XMLHttpRequest();

        req.onreadystatechange = function() {
            if (req.readyState == 4 && req.status == 200) {
                if (req.getResponseHeader('Content-Type').indexOf('application/json') > -1)
                    _pGlob.loadedFile = JSON.parse(req.responseText);
                else
                    _pGlob.loadedFile = req.responseText;

                if (caching)
                    files[url] = _pGlob.loadedFile;

                callback();
            }
        };
        req.open('GET', url, true);
        req.send();
    }
}

// assignMaterial puzzle
function assignMat(objSelector, matName) {
    var objNames = retrieveObjectNames(objSelector);
    if (!matName)
        return;
    var mat = v3d.SceneUtils.getMaterialByName(appInstance, matName);
    if (!mat)
        return;
    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        if (!objName)
            continue;
        var obj = getObjectByName(objName);
        if (obj) {
            var firstSubmesh = obj.resolveMultiMaterial()[0];
            firstSubmesh.material = mat;
        }
    }
}

function matGetValues(matName) {

    var mat = v3d.SceneUtils.getMaterialByName(appInstance, matName);
    if (!mat)
        return [];

    if (mat.isMeshNodeMaterial)
        return Object.keys(mat.nodeValueMap);
    else if (mat.isMeshStandardMaterial)
        return ['metalness', 'roughness', 'bumpScale', 'emissiveIntensity', 'envMapIntensity'];
    else
        return [];
}

// setMaterialValue puzzle
function setMaterialValue(matName, valName, value) {

    var values = matGetValues(matName);
    if (values.indexOf(valName) < 0)
        return;

    var mats = v3d.SceneUtils.getMaterialsByName(appInstance, matName);

    for (var i = 0; i < mats.length; i++) {
        var mat = mats[i];

        if (mat.isMeshNodeMaterial) {
            var valIdx = mat.nodeValueMap[valName];
            mat.nodeValue[valIdx] = Number(value);
        } else
            mat[valName] = Number(value);

        if (appInstance.scene !== null) {
            if (mat === appInstance.scene.worldMaterial) {
                appInstance.updateEnvironment(mat);
            }
        }
    }
}

// setLightParam puzzle
function setLightParam(type, objSelector, param) {

    if (type === 'SHADOW_MAP_FILTERING') {
        const rendererShadowMap = appInstance.renderer.shadowMap;
        if (rendererShadowMap) {
            let shadowMapFilteringTypeBefore = rendererShadowMap.type;

            switch (param) {
                case 'BASIC':
                    rendererShadowMap.type = v3d.BasicShadowMap;
                    break;
                case 'BILINEAR':
                    rendererShadowMap.type = v3d.BilinearShadowMap;
                    break;
                case 'PCF':
                    rendererShadowMap.type = v3d.PCFShadowMap;
                    break;
                case 'PCFBILINEAR':
                    rendererShadowMap.type = v3d.PCFSoftShadowMap;
                    break;
                case 'PCFPOISSON':
                    rendererShadowMap.type = v3d.PCFShadowMapPoissonDisk;
                    break;
                case 'ESM':
                    rendererShadowMap.type = v3d.ESMShadowMap;
                    break;
                default:
                    console.error('setLightParam puzzle: Incompatible shadow map filtering type.')
                    return;
                    break;
            }

            if (shadowMapFilteringTypeBefore != rendererShadowMap.type) {

                let deleteShadowMapFromObj = function(object) {
                    if (object.shadow) {
                        object.shadow.dispose();
                        object.shadow.map = null;
                        object.shadow._additionalMap2D = null;
                        object.shadow._additionalMapCube = null;
                    }
                }

                // need to update shadow.map for ESM filtering
                let needToUpdateShadowMaps = shadowMapFilteringTypeBefore == v3d.ESMShadowMap ||
                        rendererShadowMap.type == v3d.ESMShadowMap;
                const compiled = {};
                appInstance.scene.traverse(function(object) {

                    const material = object.material;
                    if (material && object.receiveShadow) {

                        if (Array.isArray(material)) {
                            for (let i = 0; i < material.length; i++) {
                                const material2 = material[i];

                                if (material2.uuid in compiled === false) {
                                    material2.needsUpdate = true;
                                    compiled[material2.uuid] = true;
                                }

                            }

                        } else if (material.uuid in compiled === false) {
                            material.needsUpdate = true;
                            compiled[material.uuid] = true;

                        }
                    }

                    if (needToUpdateShadowMaps)
                        deleteShadowMapFromObj(object);
                });
            }

        }
        return;
    }

    var objNames = retrieveObjectNames(objSelector);

    objNames.forEach(function(objName) {
        if (!objName)
            return;

        var obj = getObjectByName(objName);
        if (!obj || !obj.isLight)
            return;

        switch (type) {
        case 'COLOR_VECTOR':
            obj.color.r = param[0];
            obj.color.g = param[1];
            obj.color.b = param[2];
            break;
        case 'COLOR_CSS_HEX':
        case 'COLOR_CSS_RGB':
            var color = _pGlob.colorTmp.set(param);
            color.convertSRGBToLinear();
            obj.color.r = color.r;
            obj.color.g = color.g;
            obj.color.b = color.b;
            break;
        case 'INTENSITY':
            if (obj.userData.usePowerUnits)
                obj.power = param;
            else
                obj.intensity = param;
            break;
        case 'USE_SHADOW':
            if (obj.isAmbientLight || obj.isHemisphereLight) {
                console.error('setLightParam puzzle: Incompatible light source');
                return;
            }
            if (typeof(param) === "boolean")
                obj.castShadow = param;

            break;
        case 'SHADOW_MAP_SIZE':
            if (obj.isAmbientLight || obj.isHemisphereLight) {
                console.error('setLightParam puzzle: Incompatible light source');
                return;
            }
            if (obj.shadow) {
                obj.shadow.mapSize.set(param, param);
                obj.shadow.dispose();
                obj.shadow.map = null;
                obj.shadow._additionalMap2D = null;
                obj.shadow._additionalMapCube = null;
            }

            break;
        }

    });

}

// batchGeometry puzzle
function batchGeometry(objSelector) {
    var objNames = retrieveObjectNames(objSelector);
    var meshObjs = [];

    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        if (!objName)
            continue;
        var obj = getObjectByName(objName);
        if (!obj)
            continue;

        obj.resolveMultiMaterial().forEach(function(objR) {
            if (objR.isMesh && objR.geometry)
                meshObjs.push(objR);
        });

    }

    if (meshObjs.length >= 2)
        v3d.BufferGeometryUtils.batchMeshes(meshObjs, appInstance.scene);

}


removePostprocessing('PUZZLES');

sofa = true;

sofaValue = 'White';
floorValue = 'Wood planks';
shelveValue = 'Salmon';
sofaPrice = 150;
floorPrice = 300;
shelvePrice = 200;
mouseMove = false;
sofaClicked = false;
shelveClicked = false;
floorClicked = false;
info = ['QUERYSELECTOR', '.info'];
title = ['QUERYSELECTOR', '.title'];
line = ['QUERYSELECTOR', '.line'];
subTitle = ['QUERYSELECTOR', '.subTitle'];
recliner = ['QUERYSELECTOR', '.recliner1'];
shel_1 = ['QUERYSELECTOR', '.shelve1'];
shel_2 = ['QUERYSELECTOR', '.shelve2'];
shel_3 = ['QUERYSELECTOR', '.shelve3'];
piso_1 = ['QUERYSELECTOR', '.piso1'];
piso_2 = ['QUERYSELECTOR', '.piso2'];
piso_3 = ['QUERYSELECTOR', '.piso3'];
sofa_1 = ['QUERYSELECTOR', '.color1'];
sofa_2 = ['QUERYSELECTOR', '.color2'];
sofa_3 = ['QUERYSELECTOR', '.color3'];
rotation_recliner = ['QUERYSELECTOR', '.recliner2'];
delete_recliner = ['QUERYSELECTOR', '.recliner3'];
screen_shot = ['QUERYSELECTOR', '.extra1'];
dowload = ['QUERYSELECTOR', '.extra2'];
upload = ['QUERYSELECTOR', '.extra3'];
pdf = ['QUERYSELECTOR', '.pdf'];
my_3dobject = ['QUERYSELECTOR', '.uploadobject'];
objectList = [];
listPosition = 0;
getSofaPosition = [getObjTransform('SM_Sofa', false, 'position', 'x'), getObjTransform('SM_Sofa', false, 'position', 'y'), getObjTransform('SM_Sofa', false, 'position', 'z')];
eventHTMLElem('click', sofa_1, true, function(event) {
  outline('SM_Sofa', 'ENABLE');
  outline('SM_Kitchen', 'DISABLE');
  if (sofaClicked == false) {
    tweenCamera([2, -0.2, 0], [getSofaPosition[0], getSofaPosition[1], getSofaPosition[2] - 0.5], 2, function() {}, 0);
  }
  if (floorClicked == true || shelveClicked == true) {
    getJSFunction('vanishTitle')();
    getJSFunction('showTitle')();
    registerSetTimeout(1, function() {
      getJSFunction('changeTitle')('LOUNGE SOFA', '25x25x25');
    });
  } else {
    getJSFunction('changeTitle')('LOUNGE SOFA', '25x25x25');
    getJSFunction('showTitle')();
  }
  replaceTexture('M_SofaWhite', 'T_Sofa_White.jpg', './T_Sofa_Blue.jpg', function() {});
  sofaValue = 'Blue';
  sofaClicked = true;
  shelveClicked = false;
  floorClicked = false;
});
eventHTMLElem('click', sofa_2, true, function(event) {
  outline('SM_Sofa', 'ENABLE');
  outline('SM_Kitchen', 'DISABLE');
  if (sofaClicked == false) {
    tweenCamera([2, -0.2, 0], [getSofaPosition[0], getSofaPosition[1], getSofaPosition[2] - 0.5], 2, function() {}, 0);
  }
  if (floorClicked == true || shelveClicked == true) {
    getJSFunction('vanishTitle')();
    getJSFunction('showTitle')();
    registerSetTimeout(1, function() {
      getJSFunction('changeTitle')('LOUNGE SOFA', '25x25x25');
    });
  } else {
    getJSFunction('changeTitle')('LOUNGE SOFA', '25x25x25');
    getJSFunction('showTitle')();
  }
  replaceTexture('M_SofaWhite', 'T_Sofa_White.jpg', './T_Sofa_Cream.jpg', function() {});
  sofaValue = 'Cream';
  sofaClicked = true;
  shelveClicked = false;
  floorClicked = false;
});
eventHTMLElem('click', sofa_3, true, function(event) {
  outline('SM_Sofa', 'ENABLE');
  outline('SM_Kitchen', 'DISABLE');
  if (sofaClicked == false) {
    tweenCamera([2, -0.2, 0], [getSofaPosition[0], getSofaPosition[1], getSofaPosition[2] - 0.5], 2, function() {}, 0);
  }
  if (floorClicked == true || shelveClicked == true) {
    getJSFunction('vanishTitle')();
    getJSFunction('showTitle')();
    registerSetTimeout(1, function() {
      getJSFunction('changeTitle')('LOUNGE SOFA', '25x25x25');
    });
  } else {
    getJSFunction('changeTitle')('LOUNGE SOFA', '25x25x25');
    getJSFunction('showTitle')();
  }
  replaceTexture('M_SofaWhite', 'T_Sofa_White.jpg', './T_Sofa_White.jpg', function() {});
  sofaValue = 'White';
  sofaClicked = true;
  shelveClicked = false;
  floorClicked = false;
});
if (sofaValue == 'White') {
  sofaPrice = 150;
} else if (sofaValue == 'Blue') {
  sofaPrice = 175;
} else if (sofaValue == 'Cream') {
  sofaPrice = 125;
}
if (floorValue == 'Brown Marble') {
  floorPrice = 450;
} else if (floorValue == 'Wood') {
  floorPrice = 350;
} else if (floorValue == 'White Marble') {
  floorPrice = 500;
}
if (shelveValue == 'Salmon') {
  shelvePrice = 200;
} else if (shelveValue == 'Black') {
  shelvePrice = 250;
} else if (shelveValue == 'Brown') {
  shelvePrice = 175;
}
total = [sofaPrice, floorPrice, shelvePrice].reduce(function(x, y) {return x + y;}, 0);
eventHTMLElem('click', pdf, true, function(event) {
  window.pdfGenerate = {lines: [], pages: []}; cf_pdf(() => {
                       if(!window.pdfGenerate){
                  window.pdfGenerate = {lines: [], pages: []}
              } window.pdfGenerate.lines.push(`<div class="pdf__section pdf__section-image pdf__section-image_main" ` + 'style="height: 300px; box-sizing: content-box; width: 100%;"' +`>
                              <div class="pdf__image" ` + 'style="height: 300px;width: 100%;"' +`><img ` + 'height="100%" width="auto" style="' + 'border-radius:1rem;' + ' width: auto; height: 100%;object-fit: contain;"' +` class="pdf-sceenshot" src="` + appInstance.renderer.domElement.toDataURL('image/png') +`"></div>
                          </div>`);  if(!window.pdfGenerate){
                  window.pdfGenerate = {lines: [], pages: []}
              }
              window.pdfGenerate.lines.push(`<div class="pdf__line pdf__line">`+'<div class="pdf__line-name">' + 'Sofa Color' + '</div>'+'<div class="pdf__line-value">' + (['$',sofaPrice,' ',sofaValue].join('')) + '</div>'+`</div>`);  if(!window.pdfGenerate){
                  window.pdfGenerate = {lines: [], pages: []}
              }
              window.pdfGenerate.lines.push(`<div class="pdf__line pdf__line">`+'<div class="pdf__line-name">' + 'Floor Type' + '</div>'+'<div class="pdf__line-value">' + (['$',floorPrice,' ',floorValue].join('')) + '</div>'+`</div>`);  if(!window.pdfGenerate){
                  window.pdfGenerate = {lines: [], pages: []}
              }
              window.pdfGenerate.lines.push(`<div class="pdf__line pdf__line">`+'<div class="pdf__line-name">' + 'Shelve Color' + '</div>'+'<div class="pdf__line-value">' + (['$',shelvePrice,' ',shelveValue].join('')) + '</div>'+`</div>`);  if(!window.pdfGenerate){
                  window.pdfGenerate = {lines: [], pages: []}
              }
              window.pdfGenerate.lines.push(`<div class="pdf__line pdf__line">`+'<div class="pdf__line-name">' + 'Total' + '</div>'+'<div class="pdf__line-value">' + ('$' + String(total)) + '</div>'+`</div>`);  if(!window.pdfGenerate){
                  window.pdfGenerate = {lines: [], pages: []}
              }
              window.pdfGenerate.lines.push(`<div class="pdf__line pdf__line">`+''+''+`</div>`);
    window.pdfGenerate.pages.push(`<div class="pdf__page"><div class="pdf__header"><img class="logo" src="assets/images/wr.png"></div>
                        <div class="pdf__main">
                            <div class="pdf__section pdf__section-lines">`+window.pdfGenerate.lines.join('')+`</div>
                        </div>

                    </div>`);
    window.pdfGenerate.lines = [];
  }, () => {  downloadFile(cf_pdf_get(), 'proforma.pdf');
  }, "basic", )});

objectList[listPosition] = null;

moving = false;
eventHTMLElem('click', recliner, true, function(event) {
  if (!isSceneLoaded('recliner.glb')) {
    appendScene('recliner.glb', 'recliner.glb', false, false, function() {
      setObjTransform('recliner.glb', false, 'position', [2, 1, 0], false);
    }, function() {}, function() {});
    registerOnDrag('Leather_Recliner', false, [0], function() {}, function() {
      dragMove('Leather_Recliner', 'XZ', '(Wph),Q9xkKTQCjt_3/|', '4N3*RgNyIz^Bivei=;51');
    }, function() {}, '4N3*RgNyIz^Bivei=;51');
  }
});
FlyingControlsSetProp('enableDamping',true);
registerOnDrag('Leather_Recliner', false, [2], function() {}, function() {
  dragRotate('Leather_Recliner', 'Z', true, 'VlLS=qdYr%.-7):n%gak', '+/+_o:o6;vHvK[g:}K^y');
}, function() {}, '+/+_o:o6;vHvK[g:}K^y');
eventHTMLElem('click', rotation_recliner, true, function(event) {});
eventHTMLElem('click', delete_recliner, true, function(event) {
  if (isSceneLoaded('recliner.glb')) {
    unloadScene('recliner.glb');
  }
});
eventHTMLElem('click', screen_shot, true, function(event) {
  downloadFile(appInstance.renderer.domElement.toDataURL('image/png'), 'apartment.png');
});
eventHTMLElem('click', dowload, true, function(event) {
  downloadFile(exportToGLTF(['GROUP', 'Main Scene'], true, true, false), 'depa.gltf');
});
eventHTMLElem('click', upload, true, function(event) {
  loadFile('./depa.json', function() {
    json = readJSON(_pGlob.loadedFile);
    console.log(json);
  }, true);
});

eventHTMLElem('click', shel_1, true, function(event) {
  outline('SM_Sofa', 'DISABLE');
  outline('SM_Kitchen', 'ENABLE');
  if (shelveClicked == false) {
    tweenCamera([4.5, 3, 0], [4.5, -3, -0.5], 2, function() {}, 0);
  }
  if (sofaClicked == true || floorClicked == true) {
    getJSFunction('vanishTitle')();
    getJSFunction('showTitle')();
    registerSetTimeout(1, function() {
      getJSFunction('changeTitle')('LARGE CABINETS', '35x40x50');
    });
  } else {
    getJSFunction('changeTitle')('LARGE CABINETS', '35x40x50');
    getJSFunction('showTitle')();
  }
  replaceTexture('M_Kitchen_Anaquel', 'T_Anaquel_Salmon.jpg', './T_Anaquel_Salmon.jpg', function() {});
  shelveValue = 'Salmon';
  shelveClicked = true;
  sofaClicked = false;
  floorClicked = false;
});
eventHTMLElem('click', shel_2, true, function(event) {
  outline('SM_Sofa', 'DISABLE');
  outline('SM_Kitchen', 'ENABLE');
  if (shelveClicked == false) {
    tweenCamera([4.5, 3, 0], [4.5, -3, -0.5], 2, function() {}, 0);
  }
  if (sofaClicked == true || floorClicked == true) {
    getJSFunction('vanishTitle')();
    getJSFunction('showTitle')();
    registerSetTimeout(1, function() {
      getJSFunction('changeTitle')('LARGE CABINETS', '35x40x50');
    });
  } else {
    getJSFunction('changeTitle')('LARGE CABINETS', '35x40x50');
    getJSFunction('showTitle')();
  }
  shelveValue = 'Black';
  replaceTexture('M_Kitchen_Anaquel', 'T_Anaquel_Salmon.jpg', './T_Anaquel_Black.jpg', function() {});
  shelveClicked = true;
  sofaClicked = false;
  floorClicked = false;
});
eventHTMLElem('click', shel_3, true, function(event) {
  outline('SM_Sofa', 'DISABLE');
  outline('SM_Kitchen', 'ENABLE');
  if (shelveClicked == false) {
    tweenCamera([4.5, 3, 0], [4.5, -3, -0.5], 2, function() {}, 0);
  }
  if (sofaClicked == true || floorClicked == true) {
    getJSFunction('vanishTitle')();
    getJSFunction('showTitle')();
    registerSetTimeout(1, function() {
      getJSFunction('changeTitle')('LARGE CABINETS', '35x40x50');
    });
  } else {
    getJSFunction('changeTitle')('LARGE CABINETS', '35x40x50');
    getJSFunction('showTitle')();
  }
  replaceTexture('M_Kitchen_Anaquel', 'T_Anaquel_Salmon.jpg', './T_Anaquel_Brown.jpg', function() {});
  shelveValue = 'Brown';
  shelveClicked = true;
  sofaClicked = false;
  floorClicked = false;
});
eventHTMLElem('click', piso_1, true, function(event) {
  outline('SM_Sofa', 'DISABLE');
  outline('SM_Kitchen', 'DISABLE');
  if (sofaClicked == true || shelveClicked == true) {
    getJSFunction('vanishTitle')();
    getJSFunction('showTitle')();
    registerSetTimeout(1, function() {
      getJSFunction('changeTitle')('FLOORING', '150x200x5');
    });
  } else {
    getJSFunction('changeTitle')('FLOORING', '150x200x5');
    getJSFunction('showTitle')();
  }
  assignMat('SM_Floor', 'M_Floor_Marble_02');
  floorValue = 'Brown Marble';
  floorClicked = true;
  sofaClicked = false;
  shelveClicked = false;
});
eventHTMLElem('click', piso_2, true, function(event) {
  outline('SM_Kitchen', 'DISABLE');
  outline('SM_Sofa', 'DISABLE');
  if (sofaClicked == true || shelveClicked == true) {
    getJSFunction('vanishTitle')();
    getJSFunction('showTitle')();
    registerSetTimeout(1, function() {
      getJSFunction('changeTitle')('FLOORING', '150x200x5');
    });
  } else {
    getJSFunction('changeTitle')('FLOORING', '150x200x5');
    getJSFunction('showTitle')();
  }
  assignMat('SM_Floor', 'M_Floor_Wood_02');
  floorValue = 'Wood';
  floorClicked = true;
  sofaClicked = false;
  shelveClicked = false;
});
eventHTMLElem('click', piso_3, true, function(event) {
  outline('SM_Kitchen', 'DISABLE');
  outline('SM_Sofa', 'DISABLE');
  if (sofaClicked == true || shelveClicked == true) {
    getJSFunction('vanishTitle')();
    getJSFunction('showTitle')();
    registerSetTimeout(1, function() {
      getJSFunction('changeTitle')('FLOORING', '150x200x5');
    });
  } else {
    getJSFunction('changeTitle')('FLOORING', '150x200x5');
    getJSFunction('showTitle')();
  }
  assignMat('SM_Floor', 'M_Floor_Marble_01');
  floorValue = 'White Marble';
  floorClicked = true;
  sofaClicked = false;
  shelveClicked = false;
});
setMaterialValue('Verge3D_Environment_World', 'Value', 1.2);
setLightParam('INTENSITY', 'Sun.002', 1.5);
batchGeometry(['ALL_OBJECTS']);



} // end of PL.init function

})(); // end of closure

/* ================================ end of code ============================= */
